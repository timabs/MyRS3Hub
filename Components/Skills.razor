@inject ProfileDataService ProfileDataService
@using System.Text.Json
@using System.Text.Json.Serialization
@if (CurrentProfile != null) {
<div @onclick='() => ToggleAccordion("Skills")'  class="h-20 items-center flex flex-row w-full text-2xl border-y-2 border-x-0 border-black p-4" role="button" @ontouchenter='() => ToggleAccordion("Skills")'>
    <span>Skills</span>
    <span class="w-8 h-4 flex"><img src="chev-left.png" class='@GetChevronClass("Skills") w-full transition-all  object-scale-down'></span>
</div>
@if (AreSkillsOpen)
{

    <div class="w-full border-slate-700 p-2">
<ul class="list-style-none flex flex-col gap-4">
@foreach (SkillValue skill in CurrentProfile.SkillValues) {
    <li class="flex flex-row text-xl border-b-2 border-black p-4">
        <span class="w-1/3">@skill.Name</span>
        <span class="w-1/3 text-center">@skill.Level</span>
        <span class="w-1/3 text-right">@skill.Xp.ToString("N0")</span>
    </li>
}
</ul>
    </div>

}
<div @onclick='() => ToggleAccordion("Activities")'  class="h-20 items-center flex flex-row w-full text-2xl border-b-2 border-x-0 border-black p-4" role="button" @ontouchenter='() => ToggleAccordion("Activities")'>
    <span>Activities</span>
    <span class="w-8 h-4 flex"><img src="chev-left.png" class='@GetChevronClass("Activities") w-full transition-all  object-scale-down'></span>
</div>
@if (AreActivitiesOpen)
{
    <div class="w-full border-slate-700 p-2">
<ul class="list-style-none flex flex-col gap-4">
@foreach (Activity activity in CurrentProfile.Activities) {
    <li class="flex flex-col text-lg p-2 gap-4">
        @if (DateTime.TryParse(activity.Date, out date))
        {
            string formattedDate = date.ToString("MMMM dd, yyyy HH:mm");
            <span class="w-fit border-2 border-black p-2 rounded-md">@formattedDate</span>
        }  
        <span class="w-full text-2xl">@activity.Details</span>
        @if(!activity.Text.StartsWith("Levelled up")) {
            <span class="w-full italic">@activity.Text</span>
        }
        
    </li>
}
</ul>
    </div>
}
<div @onclick='() => ToggleAccordion("Quests")'  class="h-20 items-center flex flex-row w-full text-2xl border-b-2 border-x-0 border-black p-4" role="button" @ontouchenter='() => ToggleAccordion("Quests")'>
    <span>Quests</span>
    <span class="w-8 h-4 flex"><img src="chev-left.png" class='@GetChevronClass("Quests") w-full transition-all  object-scale-down'></span>
</div>
@if (AreQuestsOpen)
{
<div class="w-full border-slate-700 p-2">
    <div class="flex flex-col text-2xl p-2 gap-4">
        <span>In Progress: @CurrentProfile.QuestsInProgress</span>
        <span>Complete: @CurrentProfile.QuestsComplete</span>
        <span>Not Started: @CurrentProfile.QuestsNotStarted</span>
    </div>
</div>
}
}
@code {
    private ProfileData? CurrentProfile => ProfileDataService.ProfileData;
    private bool AreSkillsOpen = false;
    private bool AreActivitiesOpen = false;
    private bool AreQuestsOpen = false;
    private DateTime date;
    protected override void OnInitialized()
    {
        ProfileDataService.OnProfileDataUpdated += HandleProfileDataUpdated;
    }

     private void ToggleAccordion(string accordion)
    {
        switch(accordion)
        {
            case "Skills":
                AreSkillsOpen = !AreSkillsOpen;
                break;
            case "Activities":
                AreActivitiesOpen = !AreActivitiesOpen;
                break;
            case "Quests":
                AreQuestsOpen = !AreQuestsOpen;
                break;
        }
    }

private string GetChevronClass(string accordion)
    {
       switch (accordion)
    {
        case "Skills":
            return AreSkillsOpen ? "-rotate-90" : "rotate-90";
        case "Activities":
            return AreActivitiesOpen ? "-rotate-90" : "rotate-90";
        case "Quests":
            return AreQuestsOpen ? "-rotate-90" : "rotate-90";
        default:
            return "rotate-90"; // Default rotation, adjust as needed
    }
    }
    private void HandleProfileDataUpdated()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        ProfileDataService.OnProfileDataUpdated -= HandleProfileDataUpdated;
    }
}